{"version":3,"sources":["MovieInfo.js","OMDBQueryForm.js","App.js","serviceWorker.js","index.js"],"names":["MovieInfo","this","props","movie","Title","Year","src","Poster","alt","Genre","Plot","Component","OMDBQueryForm","handleChange","event","setState","target","id","value","handleSubmit","preventDefault","searchURL","state","baseURL","apikey","query","movieTitle","a","fetch","response","json","result","console","log","Fragment","onSubmit","htmlFor","type","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTAkBeA,E,uKAZP,OACI,6BACI,sCAAYC,KAAKC,MAAMC,MAAMC,OAC7B,qCAAWH,KAAKC,MAAMC,MAAME,MAC5B,yBAAKC,IAAKL,KAAKC,MAAMC,MAAMI,OAAQC,IAAKP,KAAKC,MAAMC,MAAMC,QACzD,sCAAYH,KAAKC,MAAMC,MAAMM,OAC7B,qCAAWR,KAAKC,MAAMC,MAAMO,W,GAVpBC,aCmDTC,E,kDAhDZ,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IAYVW,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,GAAKH,EAAME,OAAOE,SAdhC,EAkBnBC,aAAe,SAACL,GACZA,EAAMM,iBACN,EAAKL,SAAS,CACVM,UAAW,EAAKC,MAAMC,QAAU,EAAKD,MAAME,OAAS,EAAKF,MAAMG,MAAQ,EAAKH,MAAMI,YADtF,sBAEI,8BAAAC,EAAA,+EAGgCC,MAAM,EAAKN,MAAMD,WAHjD,cAGeQ,EAHf,gBAI8BA,EAASC,OAJvC,OAIeC,EAJf,OAKS,EAAKhB,SAAS,CAACZ,MAAO4B,IAL/B,kDAOMC,QAAQC,IAAR,MAPN,4DApBJ,EAAKX,MAAQ,CACTC,QAAS,4BACTC,OAAQ,kBACRC,MAAO,MACPC,WAAY,GACZL,UAAW,IAPA,E,qDAmCd,OACI,kBAAC,IAAMa,SAAP,KACI,0BAAMC,SAAUlC,KAAKkB,cACjB,2BAAOiB,QAAQ,cAAf,SACA,2BAAOnB,GAAG,aAAaoB,KAAK,OAAOnB,MAAOjB,KAAKqB,MAAMI,WAAYY,SAAUrC,KAAKY,eAChF,2BAAOwB,KAAK,SAASnB,MAAM,qBAE9BjB,KAAKqB,MAAMnB,MAAQ,kBAAC,EAAD,CAAWA,MAAOF,KAAKqB,MAAMnB,QAAY,Q,GA3CjDQ,aCmBb4B,E,uKAhBX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACd,kBAAC,EAAD,Y,GANM7B,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.2d1f5531.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass MovieInfo extends Component {\n\n\n    render() { \n        return (  \n            <div>\n                <h1>Title: {this.props.movie.Title}</h1>\n                <h2>Year: {this.props.movie.Year}</h2>\n                <img src={this.props.movie.Poster} alt={this.props.movie.Title}/>\n                <h3>Genre: {this.props.movie.Genre}</h3>\n                <h4>Plot: {this.props.movie.Plot}</h4>\n            </div>\n        );\n    }\n}  //the data that came back to us from OMDB set the keys to have a capital letter - we need to make sure we match our data \n \nexport default MovieInfo;\n\n/* after completed the MovieInfo component, finally, let's swap out our a tag with this component and \npass in our movie data as props we'll render nothing if there is \nno data. \n*/","import React, { Component } from 'react';\nimport MovieInfo from './MovieInfo'\n\n\nclass OMDBQueryForm extends Component {\n   constructor(props) {\n       super(props);\n       this.state = {\n           baseURL: 'https://www.omdbapi.com/?',  //the start of our request beginning with http://, after the last / we have a question mark, that will start our query parameters\n           apikey: 'apikey=' + 'c96b9abf',   //apikey is the specific key OMDB is looking for, then we'll add our own api key (no spaces).\n           query: '&t=', //the ampersand & lets us know that there is another query parameter coming up. t= is the next key, it matches the type of search we want to do. \n           movieTitle: '',  //the movie title we'd like to search for. We'll be able to enter what we want using our input and form \n           searchURL: '', //here we'll end up concatenating all the piece to make a working url. \n\n       }\n\n   }\n\n   handleChange = (event) => {\n       this.setState({[event.target.id]: event.target.value})\n\n   }\n\n   handleSubmit = (event) => {\n       event.preventDefault()\n       this.setState({\n           searchURL: this.state.baseURL + this.state.apikey + this.state.query + this.state.movieTitle\n       },  async () => {\n           //fetch request will go here , as callback (use arrow function) //use async await and try catch  \n             try{\n                    const response = await fetch(this.state.searchURL); //fetch the data from preset state searchURL\n                    const result = await response.json();//expect the result in json format \n                    this.setState({movie: result}); //movie is a new property key... will use it in MovieInfo with this.props.movie....\n             }catch (err) {\n                 console.log(err)\n             }\n       })\n   }\n\n    render() { \n        return (  \n            <React.Fragment>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor='movieTitle'>Title</label>\n                    <input id=\"movieTitle\" type=\"text\" value={this.state.movieTitle} onChange={this.handleChange} />\n                    <input type=\"submit\" value='Find Movie Info'/>\n                </form>\n                {this.state.movie ? <MovieInfo movie={this.state.movie} /> : ''} \n            </React.Fragment>\n        );   //when you click on the anchor tag, you shoud be taken to the jSON view: ....\n    }\n}\n \nexport default OMDBQueryForm ;\n\n/*\nUsing Fetch (Fetch is a function that comes with 2 arguments, first one is the path of the data and second is an object)\nRather than render the anchor tag, we want to be able to display the data we want on our webpage. \nLet's start out by getting our JSON from OMDB to console log. When we are doing a get request, all \nwe need to do is put a string as our first argument. \nWe have to make sure that state has been set, before we make our request. So we'll add our fetch request as a second\nargument in our setState function inside our handleSubmit.\n*/ \n\n/* \nRendering our response in the Browser \nLet's make a movie component that will render a view of our movie \n*/","import React, { Component } from 'react';\nimport './App.css';\nimport OMDBQueryForm from './OMDBQueryForm'\n\nclass App extends Component{\n  \n  render() { \n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <OMDBQueryForm />\n        </header>\n      </div>\n    )\n    \n  }\n  \n  \n}\n \n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}